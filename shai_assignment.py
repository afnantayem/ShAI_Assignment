# -*- coding: utf-8 -*-
"""ShAI_Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BHNMDcbsHLrMhXtEfbttMUo-K7sVNuPe
"""

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/SalariesX.csv')
df.head()

df.columns

"""1.**Basic Data Exploration**: Identify the number of rows and columns in the dataset, determine the data types of each column, and check for missing values in each column."""

df.shape

df.dtypes

df.isnull().sum()

"""2.**Descriptive Statistics**: Calculate basic statistics mean, median, mode, minimum, and maximum salary, determine the range of salaries, and find the standard deviation."""

tp_mean = df['TotalPay'].mean()
print(tp_mean)

df['TotalPay'].median()

df['TotalPay'].mode()

tp_min = df['TotalPay'].min()
print(tp_min)

tp_max = df['TotalPay'].max()
print(tp_max)

tp_range = tp_max - tp_min
tp_range

df['TotalPay'].std()

"""3.**Data Cleaning**: Handle missing data by suitable method with explain why you use it"""

df.drop('Notes' , axis=1 ,inplace=True)
# I chose drop because all values ​​are missing

df.isnull().sum()

df['BasePay'].fillna(df['BasePay'].mean() , inplace=True)

df['Benefits'].fillna(df['Benefits'].mean() , inplace=True)

df['OvertimePay'].fillna(df['OvertimePay'].mean() , inplace=True)

df['OtherPay'].fillna(df['OtherPay'].mean() , inplace=True)

df.isnull().sum()

"""4.**Basic Data Visualization**: Create histograms or bar charts to visualize the distribution of salaries, and use pie charts to represent the proportion of employees in different departments."""

import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
plt.hist(df['TotalPay'], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution of Salaries')
plt.xlabel('TotalPay(salary)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

proportion_of_employees = df['JobTitle'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(proportion_of_employees, labels=proportion_of_employees.index, autopct='%1.1f%%', startangle=140)
plt.title('Proportion of Employees in Different Departments')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
plt.show()

"""5.**Grouped Analysis**: Group the data by one or more columns and calculate summary statistics for each group, and compare the average salaries across different groups."""

id_group = df.groupby('Id').groups
print(id_group)

df.groupby('EmployeeName').groups

df.groupby('JobTitle').groups

df.groupby('BasePay').groups

df.groupby('OvertimePay').groups

df.groupby('OtherPay').groups

df.groupby('Benefits').groups

df.groupby('TotalPay').groups

df.groupby('TotalPayBenefits').groups

df.groupby('Year').groups

df.groupby('Agency').groups

BOT = df.groupby(['BasePay', 'OtherPay'])['TotalPay'].mean().reset_index()
print(BOT)

AID = df.groupby(['Agency', 'Id'])['Year'].mean().reset_index()
print(AID)

"""6.**Simple Correlation Analysis**: Identify any correlation between salary and another numerical column, and plot a scatter plot to visualize the relationship."""

correlation = df['TotalPay'].corr(df['Year'])
print(f"Correlation between Salary and Years of Experience: {correlation}")

plt.figure(figsize=(8, 6))
plt.scatter(df['Year'], df['TotalPay'], color='blue', alpha=0.7)
plt.title('Scatter Plot: Salary vs Years of Experience')
plt.xlabel('Years')
plt.ylabel('Salary')
plt.grid(True)
plt.show()

"""7.**Summary of Insights**: Write a brief report summarizing the findings and insights from the analyses.

# Salary analysis
This assignment is an assignment to register for the free course offered by the Shai Club for Artificial Intelligence. We were provided with the requirements and important notes, in addition to a set of sources and a data set to work on, and we were asked to do the following:
1.Basic Data Exploration:
Read the csv file and showed the first 5 lines of it, and knew the column names & Find out the number of lines and columns using the shape method, type the data inside each column using dtype, and check for missing data using isnull().sum().

2.Descriptive Statistics:
Calculate basic statistics mean(), median(), mode(), minimum [min()], and maximum salary[max()], determine the range  of salaries[max-min], and find the standard deviation[std()].

3.Data Cleaning:
drop Notes column because all values are missing & fill BasePay ,Benefits ,OvertimePay ,OtherPay columns by mean value of each column, by use drop & fillna methods .

4.Basic Data Visualization:
Create histograms to visualize the distribution of salaries (TotalPay) by using matplotlib.pyplot library & Creating a figure with size 8x6 inches, histogram of 'TotalPay' column with 20 bins,skyblue bars, and black edges. Adding a title to the histogram. Labeling x-axis as 'TotalPay(salary)' & y-axis as 'Frequency'. Displaying grid lines and Showing the histogram plot .
Pie chart : I create a pie chart representing the proportion of employees based on their job titles, showing the distribution of employees across different job titles. Adjust the code according to your DataFrame structure and visualization requirements.

5.Grouped Analysis:
Group the data by one or more columns using [groupby.groups], and calculate summary statistics for each group, and compare the average salaries across different groups. i used this line of code [BOT = df.groupby(['BasePay', 'OtherPay'])['TotalPay'].mean().reset_index()
print(BOT)]. In summary, this code groups the DataFrame df by the columns 'BasePay' and 'OtherPay', calculates the mean 'TotalPay' within each group, and stores the resulting DataFrame containing the unique combinations of 'BasePay' and 'OtherPay' along with their respective mean 'TotalPay' values into the variable BOT. Finally, it prints this DataFrame.

6.Simple Correlation Analysis:
[correlation = df['TotalPay'].corr(df['Year'])
print(f"Correlation between Salary and Years of Experience: {correlation}")]

this code calculates the correlation coefficient to measure the linear relationship (if any) between the 'TotalPay' column (considered as salary) and the 'Year' column (possibly representing years of experience) in the DataFrame df. The printed output shows the value of the correlation coefficient, indicating the strength and direction of the relationship between salary and years of experience.

And i do generate a scatter plot representing the relationship between years (x-axis) and salary (y-axis) , by using scatter plot from matplotlib.pyplot library

**finally **
"""